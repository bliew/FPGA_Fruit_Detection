// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RGB2Gray (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_in_data_stream_0_V_dout,
        img_in_data_stream_0_V_empty_n,
        img_in_data_stream_0_V_read,
        img_in_data_stream_1_V_dout,
        img_in_data_stream_1_V_empty_n,
        img_in_data_stream_1_V_read,
        img_in_data_stream_2_V_dout,
        img_in_data_stream_2_V_empty_n,
        img_in_data_stream_2_V_read,
        img_out_data_stream_0_V_din,
        img_out_data_stream_0_V_full_n,
        img_out_data_stream_0_V_write,
        img_out_data_stream_1_V_din,
        img_out_data_stream_1_V_full_n,
        img_out_data_stream_1_V_write,
        img_out_data_stream_2_V_din,
        img_out_data_stream_2_V_full_n,
        img_out_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img_in_data_stream_0_V_dout;
input   img_in_data_stream_0_V_empty_n;
output   img_in_data_stream_0_V_read;
input  [7:0] img_in_data_stream_1_V_dout;
input   img_in_data_stream_1_V_empty_n;
output   img_in_data_stream_1_V_read;
input  [7:0] img_in_data_stream_2_V_dout;
input   img_in_data_stream_2_V_empty_n;
output   img_in_data_stream_2_V_read;
output  [7:0] img_out_data_stream_0_V_din;
input   img_out_data_stream_0_V_full_n;
output   img_out_data_stream_0_V_write;
output  [7:0] img_out_data_stream_1_V_din;
input   img_out_data_stream_1_V_full_n;
output   img_out_data_stream_1_V_write;
output  [7:0] img_out_data_stream_2_V_din;
input   img_out_data_stream_2_V_full_n;
output   img_out_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_in_data_stream_0_V_read;
reg img_in_data_stream_1_V_read;
reg img_in_data_stream_2_V_read;
reg img_out_data_stream_0_V_write;
reg img_out_data_stream_1_V_write;
reg img_out_data_stream_2_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_in_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_281;
reg    img_in_data_stream_1_V_blk_n;
reg    img_in_data_stream_2_V_blk_n;
reg    img_out_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_reg_281_pp0_iter2_reg;
reg    img_out_data_stream_1_V_blk_n;
reg    img_out_data_stream_2_V_blk_n;
reg   [6:0] col_reg_192;
wire   [0:0] exitcond3_fu_203_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] row_3_fu_209_p2;
reg   [6:0] row_3_reg_276;
wire   [0:0] exitcond_fu_215_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_281_pp0_iter1_reg;
wire   [6:0] col_3_fu_221_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_29_reg_290;
reg   [7:0] tmp_30_reg_295;
wire   [14:0] r_V_1_fu_231_p2;
reg   [14:0] r_V_1_reg_300;
reg   [7:0] gray_reg_305;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [6:0] row_reg_181;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] r_V_1_fu_231_p0;
wire   [14:0] grp_fu_255_p3;
wire   [15:0] grp_fu_263_p3;
wire   [7:0] grp_fu_255_p0;
wire   [5:0] grp_fu_255_p1;
wire   [7:0] grp_fu_263_p0;
wire   [8:0] grp_fu_263_p1;
wire   [14:0] grp_fu_263_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] grp_fu_255_p00;
wire   [15:0] grp_fu_263_p00;
wire   [15:0] grp_fu_263_p20;
wire   [14:0] r_V_1_fu_231_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ced_mac_muladd_8nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
ced_mac_muladd_8nbkb_U11(
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .din2(r_V_1_reg_300),
    .dout(grp_fu_255_p3)
);

ced_mac_muladd_8ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
ced_mac_muladd_8ncud_U12(
    .din0(grp_fu_263_p0),
    .din1(grp_fu_263_p1),
    .din2(grp_fu_263_p2),
    .dout(grp_fu_263_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond3_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond3_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((exitcond3_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_reg_192 <= col_3_fu_221_p2;
    end else if (((exitcond3_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_reg_192 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        row_reg_181 <= row_3_reg_276;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_181 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_281 <= exitcond_fu_215_p2;
        exitcond_reg_281_pp0_iter1_reg <= exitcond_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_281_pp0_iter2_reg <= exitcond_reg_281_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_281_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gray_reg_305 <= {{grp_fu_263_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_281 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_1_reg_300 <= r_V_1_fu_231_p2;
        tmp_29_reg_290 <= img_in_data_stream_0_V_dout;
        tmp_30_reg_295 <= img_in_data_stream_1_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_3_reg_276 <= row_3_fu_209_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_215_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_281 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in_data_stream_0_V_blk_n = img_in_data_stream_0_V_empty_n;
    end else begin
        img_in_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_281 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in_data_stream_0_V_read = 1'b1;
    end else begin
        img_in_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_281 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in_data_stream_1_V_blk_n = img_in_data_stream_1_V_empty_n;
    end else begin
        img_in_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_281 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in_data_stream_1_V_read = 1'b1;
    end else begin
        img_in_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_281 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_in_data_stream_2_V_blk_n = img_in_data_stream_2_V_empty_n;
    end else begin
        img_in_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_281 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_in_data_stream_2_V_read = 1'b1;
    end else begin
        img_in_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        img_out_data_stream_0_V_blk_n = img_out_data_stream_0_V_full_n;
    end else begin
        img_out_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_data_stream_0_V_write = 1'b1;
    end else begin
        img_out_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        img_out_data_stream_1_V_blk_n = img_out_data_stream_1_V_full_n;
    end else begin
        img_out_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_data_stream_1_V_write = 1'b1;
    end else begin
        img_out_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        img_out_data_stream_2_V_blk_n = img_out_data_stream_2_V_full_n;
    end else begin
        img_out_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_data_stream_2_V_write = 1'b1;
    end else begin
        img_out_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_215_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_215_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_281 == 1'd0) & (img_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_281 == 1'd0) & (img_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_0_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_reg_281 == 1'd0) & (img_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_0_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_reg_281 == 1'd0) & (img_in_data_stream_2_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_reg_281 == 1'd0) & (img_in_data_stream_0_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = (((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_2_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_1_V_full_n == 1'b0)) | ((exitcond_reg_281_pp0_iter2_reg == 1'd0) & (img_out_data_stream_0_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign col_3_fu_221_p2 = (col_reg_192 + 7'd1);

assign exitcond3_fu_203_p2 = ((row_reg_181 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_215_p2 = ((col_reg_192 == 7'd100) ? 1'b1 : 1'b0);

assign grp_fu_255_p0 = grp_fu_255_p00;

assign grp_fu_255_p00 = tmp_29_reg_290;

assign grp_fu_255_p1 = 14'd29;

assign grp_fu_263_p0 = grp_fu_263_p00;

assign grp_fu_263_p00 = tmp_30_reg_295;

assign grp_fu_263_p1 = 16'd150;

assign grp_fu_263_p2 = grp_fu_263_p20;

assign grp_fu_263_p20 = grp_fu_255_p3;

assign img_out_data_stream_0_V_din = gray_reg_305;

assign img_out_data_stream_1_V_din = gray_reg_305;

assign img_out_data_stream_2_V_din = gray_reg_305;

assign r_V_1_fu_231_p0 = r_V_1_fu_231_p00;

assign r_V_1_fu_231_p00 = img_in_data_stream_2_V_dout;

assign r_V_1_fu_231_p2 = (r_V_1_fu_231_p0 * $signed('h4D));

assign row_3_fu_209_p2 = (row_reg_181 + 7'd1);

assign start_out = real_start;

endmodule //RGB2Gray
